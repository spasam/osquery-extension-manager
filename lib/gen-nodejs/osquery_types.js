//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

const thrift = require('thrift');
const Thrift = thrift.Thrift;
const Int64 = require('node-int64');


const ttypes = module.exports = {};
ttypes.ExtensionCode = {
  'EXT_SUCCESS' : 0,
  'EXT_FAILED' : 1,
  'EXT_FATAL' : 2
};
const InternalOptionInfo = module.exports.InternalOptionInfo = class {
  constructor(args) {
    this.value = null;
    this.default_value = null;
    this.type = null;
    if (args) {
      if (args.value !== undefined && args.value !== null) {
        this.value = args.value;
      }
      if (args.default_value !== undefined && args.default_value !== null) {
        this.default_value = args.default_value;
      }
      if (args.type !== undefined && args.type !== null) {
        this.type = args.type;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.value = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.default_value = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.type = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('InternalOptionInfo');
    if (this.value !== null && this.value !== undefined) {
      output.writeFieldBegin('value', Thrift.Type.STRING, 1);
      output.writeString(this.value);
      output.writeFieldEnd();
    }
    if (this.default_value !== null && this.default_value !== undefined) {
      output.writeFieldBegin('default_value', Thrift.Type.STRING, 2);
      output.writeString(this.default_value);
      output.writeFieldEnd();
    }
    if (this.type !== null && this.type !== undefined) {
      output.writeFieldBegin('type', Thrift.Type.STRING, 3);
      output.writeString(this.type);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const InternalExtensionInfo = module.exports.InternalExtensionInfo = class {
  constructor(args) {
    this.name = null;
    this.version = null;
    this.sdk_version = null;
    this.min_sdk_version = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.version !== undefined && args.version !== null) {
        this.version = args.version;
      }
      if (args.sdk_version !== undefined && args.sdk_version !== null) {
        this.sdk_version = args.sdk_version;
      }
      if (args.min_sdk_version !== undefined && args.min_sdk_version !== null) {
        this.min_sdk_version = args.min_sdk_version;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.version = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.sdk_version = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.min_sdk_version = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('InternalExtensionInfo');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.version !== null && this.version !== undefined) {
      output.writeFieldBegin('version', Thrift.Type.STRING, 2);
      output.writeString(this.version);
      output.writeFieldEnd();
    }
    if (this.sdk_version !== null && this.sdk_version !== undefined) {
      output.writeFieldBegin('sdk_version', Thrift.Type.STRING, 3);
      output.writeString(this.sdk_version);
      output.writeFieldEnd();
    }
    if (this.min_sdk_version !== null && this.min_sdk_version !== undefined) {
      output.writeFieldBegin('min_sdk_version', Thrift.Type.STRING, 4);
      output.writeString(this.min_sdk_version);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ExtensionStatus = module.exports.ExtensionStatus = class {
  constructor(args) {
    this.code = null;
    this.message = null;
    this.uuid = null;
    if (args) {
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.message !== undefined && args.message !== null) {
        this.message = args.message;
      }
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = args.uuid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.code = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.uuid = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ExtensionStatus');
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.I32, 1);
      output.writeI32(this.code);
      output.writeFieldEnd();
    }
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRING, 2);
      output.writeString(this.message);
      output.writeFieldEnd();
    }
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.I64, 3);
      output.writeI64(this.uuid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ExtensionResponse = module.exports.ExtensionResponse = class {
  constructor(args) {
    this.status = null;
    this.response = null;
    if (args) {
      if (args.status !== undefined && args.status !== null) {
        this.status = new ttypes.ExtensionStatus(args.status);
      }
      if (args.response !== undefined && args.response !== null) {
        this.response = Thrift.copyList(args.response, [Thrift.copyMap, null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.status = new ttypes.ExtensionStatus();
          this.status.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.response = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = {};
            const _rtmp35 = input.readMapBegin();
            const _size4 = _rtmp35.size || 0;
            for (let _i6 = 0; _i6 < _size4; ++_i6) {
              let key7 = null;
              let val8 = null;
              key7 = input.readString();
              val8 = input.readString();
              elem3[key7] = val8;
            }
            input.readMapEnd();
            this.response.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ExtensionResponse');
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
      this.status.write(output);
      output.writeFieldEnd();
    }
    if (this.response !== null && this.response !== undefined) {
      output.writeFieldBegin('response', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.MAP, this.response.length);
      for (let iter9 in this.response) {
        if (this.response.hasOwnProperty(iter9)) {
          iter9 = this.response[iter9];
          output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(iter9));
          for (let kiter10 in iter9) {
            if (iter9.hasOwnProperty(kiter10)) {
              let viter11 = iter9[kiter10];
              output.writeString(kiter10);
              output.writeString(viter11);
            }
          }
          output.writeMapEnd();
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
const ExtensionException = module.exports.ExtensionException = class extends Thrift.TException {
  constructor(args) {
    super(args);
    this.name = "ExtensionException";
    this.code = null;
    this.message = null;
    this.uuid = null;
    if (args) {
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.message !== undefined && args.message !== null) {
        this.message = args.message;
      }
      if (args.uuid !== undefined && args.uuid !== null) {
        this.uuid = args.uuid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I32) {
          this.code = input.readI32();
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.message = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.uuid = input.readI64();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('ExtensionException');
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.I32, 1);
      output.writeI32(this.code);
      output.writeFieldEnd();
    }
    if (this.message !== null && this.message !== undefined) {
      output.writeFieldBegin('message', Thrift.Type.STRING, 2);
      output.writeString(this.message);
      output.writeFieldEnd();
    }
    if (this.uuid !== null && this.uuid !== undefined) {
      output.writeFieldBegin('uuid', Thrift.Type.I64, 3);
      output.writeI64(this.uuid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
